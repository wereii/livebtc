{"version":3,"sources":["exchanges/components.js","exchanges/connectors/base.js","exchanges/connectors/bitmex.js","exchanges/connectors/bitfinex.js","exchanges/connectors/binance.js","exchanges/connectors/poloniex.js","exchanges/all.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faChevronUp","faChevronDown","PriceRow","props","state","price","last_price","is_up","exchange","newPriceEvent","new_price","tickUpdate","componentDidMount","registerCallbacks","this","setState","_props","Grid","item","className","name","icon","toFixed","ticker","React","Component","debugLog","console","log","BaseExchange","ws","WebSocket","getWSProtocol","url","onopen","wsSubscribeTicker","onclose","wsUnsubscribe","onmessage","event","onResponse","error","close","onerror","_notOverriden","Error","Bitmex","send","JSON","stringify","op","args","json","parse","data","lastPrice","undefined","Bitfinex","subscribeMsg","dataArray","length","Binance","wsSubParam","toLowerCase","wsSubPriceJSON","wsUnsubPriceJSON","e","Number","p","Poloniex","arrays","i","packet","exchanges","key","App","Container","container","direction","justify","alignItems","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ff0fc576.chunk.js","sourcesContent":["import React from 'react';\nimport './components.css';\n\nimport Grid from '@material-ui/core/Grid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faChevronUp, faChevronDown)\n\n\nclass PriceRow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            price: props.price || 0,\n            last_price: props.price || 0,\n            is_up: true,\n        };\n\n        this.exchange = props.exchange;\n        this.exchange.newPriceEvent = (new_price) => {\n            this.tickUpdate(new_price)\n        };\n\n        this.componentDidMount = () => { this.exchange.registerCallbacks() };\n    }\n\n\n    tickUpdate(new_price) {\n        this.setState(\n            (state, _props) => {\n                return {\n                    last_price: state.price,\n                    price: new_price,\n                    is_up: state.price > new_price,\n                };\n            }\n        );\n    }\n\n    render() {\n        return (\n            <Grid item className=\"price-row\">\n                <div className=\"exchange\" > {this.exchange.name}</div>\n                <div className={`price ${this.state.is_up ? \"up\" : \"down\"}`}>\n                    <span><FontAwesomeIcon icon={this.state.is_up ? \"chevron-up\" : \"chevron-down\"} /></span>\n                    <span> {this.state.price.toFixed(2)}</span>\n                </div>\n                <div className=\"ticker\">\n                    <small>{this.exchange.ticker}</small>\n                </div>\n            </Grid>\n        );\n    }\n}\n\n\nexport default PriceRow;","const VERBOSE = true;\n\nfunction debugLog(...params) {\n    if (VERBOSE) {\n        console.log(...params)\n    };\n}\n\n// abstract base class\nclass BaseExchange {\n\n    getWSProtocol() {\n        return \"wss://\"\n    }\n\n    registerCallbacks = () => {\n        this.ws = new WebSocket(this.getWSProtocol() + this.url);\n        // register ws callbacks\n        this.ws.onopen = () => {\n            this.wsSubscribeTicker(this.ws);\n            debugLog(this.name + \" :\", \"Connected\");\n        };\n        this.ws.onclose = () => {\n            this.wsUnsubscribe(this.ws);\n            debugLog(this.name + \" :\", \"Disconnected.\")\n        };\n\n        this.ws.onmessage = event => {\n            try {\n                this.onResponse(event);\n            } catch (error) {\n                console.log(error);\n                this.ws.close();\n            }\n        };\n\n        this.ws.onerror = (...params) => {\n            this.ws.close();\n        };\n        debugLog(\"Callbacks registered.\");\n\n    }\n\n    _notOverriden() {\n        throw new Error(\"Method not overriden.\");\n    }\n\n    // public events to override\n    wsSubscribeTicker = this._notOverriden;\n    wsUnsubscribe = this._notOverriden;\n\n    newPriceEvent = this._notOverriden;\n    onResponse = this._notOverriden;\n}\n\nexport default BaseExchange;","import BaseExchange from \"./base\";\n\nclass Bitmex extends BaseExchange {\n    url = \"www.bitmex.com/realtime?subscribe=instrument:XBTUSD\"\n    name = \"Bitmex\";\n    ticker = \"XBTUSD\";\n\n    wsSubscribeTicker = () => { /* Just noop override. Already subscribed thru url.*/ };\n    wsUnsubscribe = () => {\n        this.ws.send(\n            JSON.stringify({ op: \"unsubsribe\", args: \"instrument\" })\n        );\n    };\n\n    onResponse = (event) => {\n        let json = JSON.parse(event.data);\n        let price = json.data ? json.data[0]?.lastPrice : undefined;\n        if (price !== undefined) {\n            this.newPriceEvent(price);\n        }\n    };\n\n}\n\nexport default Bitmex;","import BaseExchange from \"./base\";\n\nclass Bitfinex extends BaseExchange {\n    url = \"api-pub.bitfinex.com/ws/2\"\n    name = \"Bitfinex\";\n    ticker = \"tBTCUSD\";\n\n\n    subscribeMsg = JSON.stringify(\n        {\n            \"event\": \"subscribe\",\n            \"channel\": \"trades\",\n            \"symbol\": this.ticker\n        }\n    );\n\n    wsSubscribeTicker = () => {\n        this.ws.send(this.subscribeMsg);\n    };\n\n    wsUnsubscribe = () => { };\n\n    onResponse = (event) => {\n        let dataArray = JSON.parse(event.data);\n        if (dataArray?.length >= 3 && dataArray[2].length >= 4) {\n            this.newPriceEvent(dataArray[2][3]);\n        }\n    };\n\n}\n\nexport default Bitfinex;","import BaseExchange from \"./base\";\n\nclass Binance extends BaseExchange {\n    url = \"stream.binance.com:9443/ws/btcusdt@trade\";\n    name = \"Binance\";\n    ticker = \"BTCUSDT\";\n\n    wsSubParam = this.ticker.toLowerCase() + \"@trade\"\n\n    wsSubPriceJSON = JSON.stringify({\n        \"method\": \"SUBSCRIBE\",\n        \"params\": [\n            this.wsSubParam,\n        ],\n        \"id\": 1,\n    });\n\n    wsUnsubPriceJSON = JSON.stringify({\n        \"method\": \"UNSUBSCRIBE\",\n        \"params\": [\n            this.wsSubParam,\n        ],\n        \"id\": 312,\n    });\n\n    wsSubscribeTicker = () => {\n        //this.ws.send(this.wsSubPriceJSON)\n    };\n    wsUnsubscribe = () => {\n        this.ws.send(this.wsUnsubPriceJSON);\n    };\n\n    onResponse = (event) => {\n        let json = JSON.parse(event.data);\n        if (json?.e === \"trade\") {\n            this.newPriceEvent(Number(json?.p) ? Number(json?.p) : 0);\n        }\n    };\n\n}\n\nexport default Binance;","import BaseExchange from \"./base\";\n\nclass Poloniex extends BaseExchange {\n    url = \"api2.poloniex.com\"\n    name = \"Poloniex\";\n    ticker = \"USDT_BTC\";\n\n    wsSubscribeTicker = () => {\n        this.ws.send(JSON.stringify({ \"command\": \"subscribe\", \"channel\": this.ticker }))\n    };\n\n    wsUnsubscribe = () => {\n        this.ws.send(\n            JSON.stringify({ \"command\": \"unsubscribe\", \"channel\": this.ticker })\n        );\n    };\n\n\n    // [121,668117920,[[\"o\",0,\"5413.26961819\",\"1.00495657\"],[\"t\",\"32127293\",1,\"5413.26961819\",\"0.00271524\",1584191288]]]\n    onResponse = (event) => {\n        let json = JSON.parse(event.data);\n        let arrays = json[2];\n\n        for (let i = 0; i < arrays.length; i++) {\n            const packet = arrays[i];\n            if (packet[0] === \"t\") {\n                this.newPriceEvent(Number(packet[3]) || 0);\n                break;\n            };\n        }\n    };\n\n}\n\nexport default Poloniex;","import PriceCell from \"./components\";\nimport React from \"react\";\n\nimport Bitmex from \"./connectors/bitmex\";\nimport Bitfinex from \"./connectors/bitfinex\";\nimport Binance from \"./connectors/binance\";\nimport Poloniex from \"./connectors/poloniex\";\n\nconst exchanges = [\n    <PriceCell key=\"Bitmex\" exchange={new Bitmex()} />,\n    <PriceCell key=\"Bitfinex\" exchange={new Bitfinex()} />,\n    <PriceCell key=\"Binance\" exchange={new Binance()} />,\n    <PriceCell key=\"Poloniex\" exchange={new Poloniex()} />,\n];\n\nexport default exchanges;","import React from 'react';\nimport './App.css';\nimport exchanges from './exchanges/all';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container'\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Container className=\"App\">\n        <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n          {exchanges}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}